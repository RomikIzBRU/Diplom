from aiogram import Router, types, F
from aiogram.filters import Command
from keyboards.admin import admin_panel_keyboard, edit_goods_keyboard
from services.auth import verify_admin_password
from services.stats import get_user_stats
from services.pdf_export import export_stats_to_pdf
from handlers.start import start as start_handler
from services.db import (
    add_category, add_product, get_categories,
    get_products, delete_product, delete_category,
    update_product, update_category
)

router = Router()
admin_sessions = {}

@router.message(Command("admin"))
async def admin_start(message: types.Message):
    user_id = message.from_user.id
    admin_sessions[user_id] = {"awaiting_password": True}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")


@router.message(F.from_user.id.in_(admin_sessions.keys()))
async def handle_admin_message(message: types.Message):
    user_id = message.from_user.id
    session = admin_sessions.get(user_id, {})

    if session.get("awaiting_password"):
        if verify_admin_password(message.text):
            session["authenticated"] = True
            session.pop("awaiting_password")
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_panel_keyboard)
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    if not session.get("authenticated"):
        return

    if message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        stats = get_user_stats()
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n{stats}")

    elif message.text == "üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF":
        file_path = export_stats_to_pdf()
        await message.answer_document(types.FSInputFile(file_path))

    elif message.text == "üõ† –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã":
        session["state"] = "edit_goods"
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=edit_goods_keyboard)

    elif message.text == "üîô –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
        session["state"] = None
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=admin_panel_keyboard)

    elif message.text == "üîô –í—ã–π—Ç–∏":
        admin_sessions.pop(user_id, None)
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=types.ReplyKeyboardRemove())
        await start_handler(message)

    elif message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
        session["state"] = "awaiting_category_name"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")

    elif session.get("state") == "awaiting_category_name":
        category_name = message.text.strip()
        add_category(category_name)
        session["state"] = None
        await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ", reply_markup=edit_goods_keyboard)

    elif message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
        categories = get_categories()
        category_list = "\n".join([f"{c['id']}: {c['name']}" for c in categories])
        session["state"] = "awaiting_delete_category"
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n{category_list}")

    elif session.get("state") == "awaiting_delete_category":
        try:
            category_id = int(message.text.strip())
            delete_category(category_id)
            session["state"] = None
            await message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞!", reply_markup=edit_goods_keyboard)
        except:
            await message.answer("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.")

    # === –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
    elif message.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
        categories = get_categories()
        category_list = "\n".join([f"{c['id']}: {c['name']}" for c in categories])
        session["state"] = "awaiting_edit_category_id"
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n{category_list}")

    elif session.get("state") == "awaiting_edit_category_id":
        try:
            session["edit_category_id"] = int(message.text.strip())
            session["state"] = "awaiting_edit_category_name"
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        except ValueError:
            await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    elif session.get("state") == "awaiting_edit_category_name":
        name = message.text.strip()
        update_category(session["edit_category_id"], name)
        session["state"] = None
        session.pop("edit_category_id", None)
        await message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=edit_goods_keyboard)

    elif message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä":
        categories = get_categories()
        if not categories:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
            return
        session["state"] = "awaiting_product_name"
        session["product_data"] = {}
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

    elif session.get("state") == "awaiting_product_name":
        session["product_data"]["name"] = message.text.strip()
        session["state"] = "awaiting_product_price"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")

    elif session.get("state") == "awaiting_product_price":
        try:
            price = float(message.text.strip())
            session["product_data"]["price"] = price
            session["state"] = "awaiting_product_quantity"
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")
        except ValueError:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")

    elif session.get("state") == "awaiting_product_quantity":
        try:
            quantity = int(message.text.strip())
            session["product_data"]["quantity"] = quantity
            categories = get_categories()
            category_list = "\n".join([f"{c['id']}: {c['name']}" for c in categories])
            session["state"] = "awaiting_product_category"
            await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ (–≤–≤–µ–¥–∏—Ç–µ ID):\n{category_list}")
        except ValueError:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    elif session.get("state") == "awaiting_product_category":
        try:
            category_id = int(message.text.strip())
            data = session["product_data"]
            add_product(category_id, data["name"], data["price"], data["quantity"])
            session["state"] = None
            session.pop("product_data", None)
            await message.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=edit_goods_keyboard)
        except:
            await message.answer("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

    # === –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ===
    elif message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä":
        products = get_products()
        product_list = "\n".join([f"{p['id']}: {p['name']}" for p in products])
        session["state"] = "awaiting_delete_product"
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n{product_list}")

    elif session.get("state") == "awaiting_delete_product":
        try:
            product_id = int(message.text.strip())
            delete_product(product_id)
            session["state"] = None
            await message.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω!", reply_markup=edit_goods_keyboard)
        except:
            await message.answer("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ID –≤–µ—Ä–Ω—ã–π.")

    elif message.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä":
        products = get_products()
        product_list = "\n".join([f"{p['id']}: {p['name']}" for p in products])
        session["state"] = "awaiting_edit_product_id"
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n{product_list}")

    elif session.get("state") == "awaiting_edit_product_id":
        try:
            session["edit_product_id"] = int(message.text.strip())
            session["state"] = "awaiting_edit_product_name"
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        except:
            await message.answer("ID —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    elif session.get("state") == "awaiting_edit_product_name":
        session["edit_product_name"] = message.text.strip()
        session["state"] = "awaiting_edit_product_price"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:")

    elif session.get("state") == "awaiting_edit_product_price":
        try:
            session["edit_product_price"] = float(message.text.strip())
            session["state"] = "awaiting_edit_product_quantity"
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
        except ValueError:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    elif session.get("state") == "awaiting_edit_product_quantity":
        try:
            quantity = int(message.text.strip())
            update_product(
                session["edit_product_id"],
                session["edit_product_name"],
                session["edit_product_price"],
                quantity
            )
            session["state"] = None
            session.pop("edit_product_id", None)
            session.pop("edit_product_name", None)
            session.pop("edit_product_price", None)
            await message.answer("‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=edit_goods_keyboard)
        except:
            await message.answer("–û—à–∏–±–∫–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚Äî —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=admin_panel_keyboard)
