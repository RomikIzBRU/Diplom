from aiogram import Router, types, F,Bot
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    LabeledPrice,
    PreCheckoutQuery,
    Message,
)
from keyboards.shop import get_categories_keyboard, get_products_keyboard
from keyboards.main import main_keyboard
from services.db import (
    get_products_by_category,
    get_product_by_id,
    get_category_by_id,
    add_purchase
)
from config import RESPONSABLE_EMPLOYER, BOT_PAYMENT_TOKEN, SECONDARY_BOT_TOKEN
import asyncio

router = Router()

try:
    secondary_bot = Bot(token=SECONDARY_BOT_TOKEN) if SECONDARY_BOT_TOKEN else None
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    secondary_bot = None
def get_purchase_options_keyboard(product_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Telegram", callback_data=f"pay_{product_id}")],
        [InlineKeyboardButton(text="üì© –ó–∞–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data=f"buy_{product_id}")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="shop")]
    ])


@router.callback_query(F.data == "shop")
async def show_categories(call: CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_categories_keyboard())


@router.callback_query(F.data.startswith("category_"))
async def show_products(call: CallbackQuery):
    category_id = int(call.data.split("_")[1])
    category = get_category_by_id(category_id)

    if not category:
        await call.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    products = get_products_by_category(category_id)

    if not products:
        await call.message.edit_text(
            f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category['name']}¬ª –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.",
            reply_markup=get_categories_keyboard()
        )
    else:
        await call.message.edit_text(
            f"üì¶ –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category['name']}¬ª:",
            reply_markup=get_products_keyboard(products)
        )


@router.callback_query(F.data.startswith("product_"))
async def show_purchase_options(call: CallbackQuery):
    product_id = int(call.data.split("_")[1])
    product = get_product_by_id(product_id)

    if not product:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await call.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\nüì¶ {product['name']}\nüíµ –¶–µ–Ω–∞: {product['price']} BYN\n\n–ö–∞–∫ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=get_purchase_options_keyboard(product_id)
    )


@router.callback_query(F.data.startswith("buy_"))
async def buy_product(call: CallbackQuery):
    product_id = int(call.data.split("_")[1])
    product = get_product_by_id(product_id)

    if not product:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    message = (
        f"üõç –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
        f"üì¶ –¢–æ–≤–∞—Ä: {product['name']}\n"
        f"üíµ –¶–µ–Ω–∞: {product['price']} BYN\n"
        f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{call.from_user.username or '–±–µ–∑ –Ω–∏–∫–∞'} (ID: {call.from_user.id})"
    )
    try:
        if not secondary_bot:
            raise RuntimeError("–ë–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        employer_nick = RESPONSABLE_EMPLOYER
        chat = await secondary_bot.get_chat(f"{employer_nick}")
        print(f"‚úÖ –ß–∞—Ç –Ω–∞–π–¥–µ–Ω: {chat.id}")

        await secondary_bot.send_message(chat_id=chat.id,text=message)
    except Exception as e:
        print(f"üî• –û—à–∏–±–∫–∞: {repr(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


    await call.message.answer("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É. –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.")


@router.callback_query(F.data.startswith("pay_"))
async def pay_via_telegram(call: CallbackQuery):
    product_id = int(call.data.split("_")[1])
    product = get_product_by_id(product_id)

    if not product:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await call.bot.send_invoice(
        chat_id=call.from_user.id,
        title=product['name'],
        description=f"–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞: {product['name']}",
        payload=f"purchase_{product_id}",
        provider_token=BOT_PAYMENT_TOKEN,
        currency="BYN",
        prices=[LabeledPrice(label=product['name'], amount=int(product['price'] * 100))],
        start_parameter="buy_product",
        photo_url="",
        photo_width=600,
        photo_height=400,
        need_email=False,
        need_name=False,
        is_flexible=False,
    )


@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout: PreCheckoutQuery):
    await pre_checkout.answer(ok=True)


@router.message(F.successful_payment)
async def successful_payment_handler(message: Message):
    payload = message.successful_payment.invoice_payload
    product_id = int(payload.split("_")[1])
    product = get_product_by_id(product_id)
    user_id = message.from_user.id
    price = product['price']
    await asyncio.to_thread(add_purchase, user_id, product_id, price)
    await message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\nüì¶ –¢–æ–≤–∞—Ä: {product['name']}\nüíµ –°—É–º–º–∞: {product['price']} BYN")

    text = (
        f"üí∞ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n"
        f"üì¶ –¢–æ–≤–∞—Ä: {product['name']}\n"
        f"üíµ –°—É–º–º–∞: {product['price']} BYN\n"
        f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{message.from_user.username or '–±–µ–∑ –Ω–∏–∫–∞'} (ID: {message.from_user.id})"
    )

    try:
        if not secondary_bot:
            raise RuntimeError("–ë–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        chat = await secondary_bot.get_chat(RESPONSABLE_EMPLOYER)
        await secondary_bot.send_message(chat_id=chat.id, text=text)
        print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ secondary_bot")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ secondary_bot: {e}")


@router.callback_query(F.data == "back")
async def back_to_main_menu(call: CallbackQuery):
    await call.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard)
