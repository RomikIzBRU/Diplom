from aiogram import Router, types, F, Bot
import re
from config import RESPONSABLE_EMPLOYER, SECONDARY_BOT_TOKEN

router = Router()
support_data = {}

try:
    secondary_bot = Bot(token=SECONDARY_BOT_TOKEN) if SECONDARY_BOT_TOKEN else None
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    secondary_bot = None

phone_pattern = re.compile(r"^\+375 \((25|29|33|44)\) \d{3}-\d{2}-\d{2}$")


@router.callback_query(F.data == "support")
async def request_support(call: types.CallbackQuery):
    user_id = call.from_user.id
    await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    support_data[user_id] = {"stage": "name"}
    print(f"üÜï –°–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞ | User: {user_id}")


@router.message(F.from_user.id.in_(support_data.keys()))
async def collect_support_info(message: types.Message):
    user_id = message.from_user.id
    data = support_data.get(user_id)

    if not data:
        return await message.answer("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")

    stage = data.get("stage")
    print(f"üîß –≠—Ç–∞–ø: {stage} | User: {user_id}")

    if stage == "name":
        data["name"] = message.text.strip()
        data["stage"] = "phone"
        await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +375 (XX) XXX-XX-XX")
        return

    elif stage == "phone":
        phone = message.text.strip()
        if not phone_pattern.match(phone):
            return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: +375 (29) 123-45-67")

        data["phone"] = phone
        data["stage"] = "question"
        await message.answer("‚ùì –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
        return

    elif stage == "question":
        data["question"] = message.text.strip()

        try:
            if not secondary_bot:
                raise RuntimeError("–ë–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

            employer_nick = RESPONSABLE_EMPLOYER
            chat = await secondary_bot.get_chat(f"{employer_nick}")
            print(f"‚úÖ –ß–∞—Ç –Ω–∞–π–¥–µ–Ω: {chat.id}")

            await secondary_bot.send_message(
                chat_id=chat.id,
                text=f"üì© –í–æ–ø—Ä–æ—Å –æ—Ç @{message.from_user.username or user_id}\n"
                     f"üë§ –ò–º—è: {data['name']}\n"
                     f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
                     f"‚ùì –í–æ–ø—Ä–æ—Å: {data['question']}"
            )
            await message.answer("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ù–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")

        except Exception as e:
            print(f"üî• –û—à–∏–±–∫–∞: {repr(e)}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

        finally:
            del support_data[user_id]
            print(f"üóë –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ | User: {user_id}")